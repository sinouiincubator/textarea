{"version":3,"sources":["E:/workspace/textarea/src/Textarea.tsx","E:/workspace/textarea/src/index.ts","E:/workspace/textarea/docs/index.mdx"],"names":["borderStyle","css","props","theme","palette","input","bottomLine","action","active","focusedBorderStyle","primary","StyledTextarea","styled","textarea","typography","subheading","fontSize","fontFamily","fontWeightRegular","text","focused","Textarea","defaultValue","value","onChange","onBlur","className","useState","setFocused","handleOnFocus","useCallback","handleBlur","onFocus","classNames","layoutProps","MDXLayout","MDXContent","components","mdxType","parentName","alt","src","__position","__code","__scope","this","Playground","Props","setValue","event","newValue","target","of","isMDXComponent"],"mappings":"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","file":"static/js/docs-index.64ca24c9.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport classNames from 'classnames';\n\nexport interface TextareaProps {\n  /**\n   * 文本框的值\n   */\n  value?: string;\n  /**\n   * 文本框的默认值\n   */\n  defaultValue?: string;\n  /**\n   * 值变更时的回调函数\n   */\n  onChange?: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  /**\n   * 失去焦点时的回调函数\n   */\n  onBlur?: () => void;\n  /**\n   * 是都自动获取焦点\n   */\n  autoFocus?: boolean;\n  /**\n   * 最大长度\n   */\n  maxLength?: number;\n  /**\n   * 提示文本\n   */\n  placeholder?: string;\n  /**\n   * 样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 自定义样式类名称\n   */\n  className?: string;\n}\n\nconst borderStyle = css`\n  border: 1px solid ${(props) => props.theme.palette.input.bottomLine};\n  transition: border-color 300ms;\n\n  :hover {\n    padding: 3px;\n    border: 2px solid ${(props) => props.theme.palette.action.active};\n  }\n`;\n\nconst focusedBorderStyle = css`\n  padding: 3px;\n  border: 2px solid ${(props) => props.theme.palette.primary[500]};\n`;\n\nconst StyledTextarea = styled.textarea<TextareaProps & { focused?: boolean }>`\n  min-height: 80px;\n  box-sizing: border-box;\n  padding: 4px;\n  resize: none;\n  outline: none;\n  font-size: ${(props) => props.theme.typography.subheading.fontSize}rem;\n  font-family: ${(props) => props.theme.typography.fontFamily};\n  font-weight: ${(props) => props.theme.typography.fontWeightRegular};\n  overflow: auto;\n  color: ${(props) => props.theme.palette.text.primary};\n  background-color: transparent;\n  ${(props) => (props.focused ? focusedBorderStyle : borderStyle)};\n`;\n\n/**\n * 多行文本输入框\n * @param props TextareaProps\n */\nexport default function Textarea(props: TextareaProps) {\n  const { defaultValue, value, onChange, onBlur, className } = props;\n  const [focused, setFocused] = useState(false);\n\n  /**\n   * 获取焦点时的回调函数\n   */\n  const handleOnFocus = useCallback(() => setFocused(true), []);\n\n  /**\n   * 失去焦点时的回调函数\n   */\n  const handleBlur = useCallback(() => {\n    setFocused(false);\n    if (onBlur) {\n      onBlur();\n    }\n  }, [onBlur]);\n\n  return (\n    <StyledTextarea\n      {...props}\n      defaultValue={defaultValue}\n      value={value}\n      onChange={onChange}\n      onFocus={handleOnFocus}\n      focused={focused}\n      onBlur={handleBlur}\n      className={classNames('sinouiincubator-textarea', className)}\n    />\n  );\n}\n","import Textarea, { TextareaProps } from './Textarea';\n\nexport default Textarea;\n\nexport { TextareaProps };\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { useState, useCallback } from 'react';\nimport { Playground, Props } from 'docz';\nimport Textarea from '../src';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"sinouiincubatortextarea\"\n    }}>{`@sinouiincubator/textarea`}</h1>\n    <p>{`多行文本输入框组件。`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/@sinouiincubator/textarea\"\n      }}><img alt=\"npm version\" src=\"https://img.shields.io/npm/v/@sinouiincubator/textarea\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/@sinouiincubator/textarea\"\n      }}><img alt=\"downloads\" src=\"https://img.shields.io/npm/dm/@sinouiincubator/textarea\" /></a></p>\n    <h2 {...{\n      \"id\": \"依赖安装\"\n    }}>{`依赖安装`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn add @sinouiincubator/textarea\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"简单示例\"\n    }}>{`简单示例`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState, useCallback } from 'react';\nimport Textarea from '@sinouiincubator/textarea';\n\nfunction SimpleDemo() {\n  const [value, setValue] = useState();\n\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n      const newValue = event.target.value;\n      setValue(newValue);\n    },\n    [],\n  );\n\n  return <Textarea value={value} onChange={onChange} />;\n}\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const [value, setValue] = useState()\\n  const onChange = useCallback(event => {\\n    const newValue = event.target.value\\n    setValue(newValue)\\n  }, [])\\n  return <Textarea value={value} onChange={onChange} />\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      useCallback,\n      Playground,\n      Props,\n      Textarea\n    }} mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = useState();\n        const onChange = useCallback(event => {\n          const newValue = event.target.value;\n          setValue(newValue);\n        }, []);\n        return <Textarea value={value} onChange={onChange} mdxType=\"Textarea\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"与sinouisinoui-components-forms-集成\"\n    }}>{`与@sinoui/sinoui-components-forms 集成`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://sinoui.github.io/sinoui-forms-library/sinoui-components-forms\"\n      }}>{`@sinoui/sinoui-components-forms`}</a>{`是以`}<inlineCode parentName=\"p\">{`sinoui-components`}</inlineCode>{`为基础的表单控件库。\n`}<inlineCode parentName=\"p\">{`Textarea`}</inlineCode>{`与`}<inlineCode parentName=\"p\">{`@sinoui/sinoui-components-forms`}</inlineCode>{`的集成方式如下：`}</p>\n    <p>{`首先定义`}<inlineCode parentName=\"p\">{`TextareaField`}</inlineCode>{`组件：`}</p>\n    <p><inlineCode parentName=\"p\">{`TextareaField.tsx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport classNames from 'classnames';\nimport Textarea, { TextareaProps } from '@sinouiincubator/textarea';\nimport { Field, FieldProps } from '@sinoui/sinoui-components-forms';\n\nexport type TextareaFieldProps = FieldProps<TextareaProps, string>;\n\nfunction TextareaField(props: TextareaFieldProps) {\n  const { className } = props;\n  return (\n    <Field\n      as={Textarea}\n      defaultValue=\"\"\n      {...props}\n      className={classNames(className, 'sinoui-text-input-field')}\n    />\n  );\n}\n\nexport default TextareaField;\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { Form, FormItem, Label } from '@sinoui/sinoui-components-forms';\nimport TextareaField from './TextareaField';\n\nfunction Demo() {\n  return (\n    <Form>\n      <FormItem>\n        <Label>备注</Label>\n        <TextareaField name=\"note\" />\n      </FormItem>\n    </Form>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"样式自定义\"\n    }}>{`样式自定义`}</h2>\n    <p><inlineCode parentName=\"p\">{`Textarea`}</inlineCode>{`的 DOM 结构非常简单，只有一个`}<inlineCode parentName=\"p\">{`textarea`}</inlineCode>{`元素，具体如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<textarea class=\"sinouiincubator-textarea\" />\n`}</code></pre>\n    <p>{`我们可以直接使用`}<inlineCode parentName=\"p\">{`className`}</inlineCode>{`定义`}<inlineCode parentName=\"p\">{`css`}</inlineCode>{`文件，也可以使用`}<inlineCode parentName=\"p\">{`styled-components`}</inlineCode>{`自定义样式。`}</p>\n    <h2 {...{\n      \"id\": \"属性\"\n    }}>{`属性`}</h2>\n    <Props of={Textarea} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}